
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.8.2
 * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
 */
Prisma.prismaVersion = {
  client: "6.8.2",
  engine: "2060c79ba17c6bb9f5823312b6f6b7f4a845738e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.Tipo_documentoScalarFieldEnum = {
  id: 'id',
  nome: 'nome',
  descricao: 'descricao'
};

exports.Prisma.EspecialidadeScalarFieldEnum = {
  id: 'id',
  nome: 'nome',
  descricao: 'descricao'
};

exports.Prisma.PacienteScalarFieldEnum = {
  id: 'id',
  nome: 'nome',
  idade: 'idade',
  data_nascimento: 'data_nascimento',
  sexo: 'sexo',
  cpf: 'cpf',
  telefone: 'telefone',
  email: 'email',
  alergias: 'alergias',
  altura: 'altura',
  bairro: 'bairro',
  cep: 'cep',
  cidade: 'cidade',
  complemento: 'complemento',
  created_at: 'created_at',
  endereco: 'endereco',
  estado: 'estado',
  medicamentos_uso: 'medicamentos_uso',
  nome_responsavel: 'nome_responsavel',
  numero: 'numero',
  observacoes: 'observacoes',
  peso: 'peso',
  rg: 'rg',
  telefone_contato: 'telefone_contato',
  telefone_responsavel: 'telefone_responsavel',
  tipo_sanguineo: 'tipo_sanguineo',
  updated_at: 'updated_at'
};

exports.Prisma.ConsultaScalarFieldEnum = {
  id: 'id',
  paciente_id: 'paciente_id',
  profissional_id: 'profissional_id',
  unidade_id: 'unidade_id',
  data: 'data',
  created_at: 'created_at',
  hora: 'hora',
  observacoes: 'observacoes',
  status: 'status',
  updated_at: 'updated_at'
};

exports.Prisma.ProntuarioScalarFieldEnum = {
  id: 'id',
  paciente_id: 'paciente_id',
  profissional_id: 'profissional_id',
  data_atendimento: 'data_atendimento',
  queixa_principal: 'queixa_principal',
  historia_doenca_atual: 'historia_doenca_atual',
  historia_patologica: 'historia_patologica',
  historia_familiar: 'historia_familiar',
  historia_social: 'historia_social',
  exame_fisico: 'exame_fisico',
  pressao_arterial: 'pressao_arterial',
  frequencia_cardiaca: 'frequencia_cardiaca',
  temperatura: 'temperatura',
  peso_atual: 'peso_atual',
  altura_atual: 'altura_atual',
  hipotese_diagnostica: 'hipotese_diagnostica',
  diagnostico_definitivo: 'diagnostico_definitivo',
  conduta: 'conduta',
  observacoes: 'observacoes',
  retorno: 'retorno',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Tipo_procedimentoScalarFieldEnum = {
  id: 'id',
  nome: 'nome',
  categoria: 'categoria',
  descricao: 'descricao',
  valor: 'valor',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.ProcedimentoScalarFieldEnum = {
  id: 'id',
  tipo_procedimento_id: 'tipo_procedimento_id',
  nome: 'nome',
  codigo: 'codigo',
  descricao: 'descricao',
  valor_padrao: 'valor_padrao',
  ativo: 'ativo',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Procedimento_realizadoScalarFieldEnum = {
  id: 'id',
  prontuario_id: 'prontuario_id',
  procedimento_id: 'procedimento_id',
  data_realizacao: 'data_realizacao',
  observacoes: 'observacoes',
  valor: 'valor',
  status: 'status',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.MedicamentoScalarFieldEnum = {
  id: 'id',
  nome: 'nome',
  principio_ativo: 'principio_ativo',
  concentracao: 'concentracao',
  forma_farmaceutica: 'forma_farmaceutica',
  fabricante: 'fabricante',
  codigo_barras: 'codigo_barras',
  ativo: 'ativo',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.PrescricaoScalarFieldEnum = {
  id: 'id',
  duracao: 'duracao',
  created_at: 'created_at',
  dosagem: 'dosagem',
  frequencia: 'frequencia',
  observacoes: 'observacoes',
  prontuario_id: 'prontuario_id',
  updated_at: 'updated_at',
  data_fim: 'data_fim',
  data_inicio: 'data_inicio',
  medicamento_id: 'medicamento_id',
  medicamento_nome: 'medicamento_nome',
  quantidade: 'quantidade',
  status: 'status',
  via_administracao: 'via_administracao'
};

exports.Prisma.Profissional_saudeScalarFieldEnum = {
  id: 'id',
  nome: 'nome',
  email: 'email',
  senha: 'senha',
  data_nascimento: 'data_nascimento',
  documento_numero: 'documento_numero',
  especialidade_id: 'especialidade_id',
  tipo_documento_id: 'tipo_documento_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.TemplateScalarFieldEnum = {
  id: 'id',
  titulo: 'titulo',
  sintomas_padrao: 'sintomas_padrao',
  condutas_sugeridas: 'condutas_sugeridas',
  sazonalidade: 'sazonalidade',
  created_at: 'created_at',
  medicamentos_recomendados: 'medicamentos_recomendados',
  updated_at: 'updated_at'
};

exports.Prisma.Tipo_unidadeScalarFieldEnum = {
  id: 'id',
  codigo: 'codigo',
  nome: 'nome',
  descricao: 'descricao',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Unidade_saudeScalarFieldEnum = {
  id: 'id',
  nome: 'nome',
  cnes: 'cnes',
  endereco: 'endereco',
  cidade: 'cidade',
  estado: 'estado',
  created_at: 'created_at',
  telefone: 'telefone',
  email: 'email',
  horario_funcionamento: 'horario_funcionamento',
  observacoes: 'observacoes',
  tipo_id: 'tipo_id',
  updated_at: 'updated_at'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  tipo_documento: 'tipo_documento',
  especialidade: 'especialidade',
  paciente: 'paciente',
  consulta: 'consulta',
  prontuario: 'prontuario',
  tipo_procedimento: 'tipo_procedimento',
  procedimento: 'procedimento',
  procedimento_realizado: 'procedimento_realizado',
  medicamento: 'medicamento',
  prescricao: 'prescricao',
  profissional_saude: 'profissional_saude',
  template: 'template',
  tipo_unidade: 'tipo_unidade',
  unidade_saude: 'unidade_saude'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
